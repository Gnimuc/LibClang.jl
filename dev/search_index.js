var documenterSearchIndex = {"docs":
[{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = LibClang","category":"page"},{"location":"index.html#LibClang-1","page":"Home","title":"LibClang","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Modules = [LibClang]","category":"page"},{"location":"index.html#LibClang.CXAvailabilityKind","page":"Home","title":"LibClang.CXAvailabilityKind","text":"Describes the availability of a particular entity, which indicates whether the use of this entity will result in a warning or error due to it being deprecated or unavailable.\n\nCXAvailability_Available: the entity is available.\nCXAvailability_Deprecated: the entity is available, but has been deprecated (and its use is not recommended).\nCXAvailability_NotAvailable: the entity is not available; any use of it will be an error.\nCXAvailability_NotAccessible: the entity is available, but not accessible; any use of it will be an error.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCallingConv","page":"Home","title":"LibClang.CXCallingConv","text":"Describes the calling convention of a function type\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXChildVisitResult","page":"Home","title":"LibClang.CXChildVisitResult","text":"Describes how the traversal of the children of a particular cursor should proceed after visiting a particular child cursor.\n\nA value of this enumeration type should be returned by each CXCursorVisitor to indicate how clang_visitChildren proceed.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXClientData","page":"Home","title":"LibClang.CXClientData","text":"Opaque pointer representing client data that will be passed through to various callbacks and visitors.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCodeCompleteResults","page":"Home","title":"LibClang.CXCodeCompleteResults","text":"Contains the results of code-completion.\n\nThis data structure contains the results of code completion, as produced by clang_codeCompleteAt. Its contents must be freed by clang_disposeCodeCompleteResults.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCodeComplete_Flags","page":"Home","title":"LibClang.CXCodeComplete_Flags","text":"Flags that can be passed to clang_codeCompleteAt to modify its behavior.\n\nThe enumerators in this enumeration can be bitwise-OR'd together to provide multiple options to clang_codeCompleteAt.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXComment","page":"Home","title":"LibClang.CXComment","text":"A parsed comment.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCommentInlineCommandRenderKind","page":"Home","title":"LibClang.CXCommentInlineCommandRenderKind","text":"The most appropriate rendering mode for an inline command, chosen on command semantics in Doxygen.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCommentKind","page":"Home","title":"LibClang.CXCommentKind","text":"Describes the type of the comment AST node (CXComment).  A comment node can be considered block content (e. g., paragraph), inline content(plain text) or neither (the root AST node).\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCommentParamPassDirection","page":"Home","title":"LibClang.CXCommentParamPassDirection","text":"Describes parameter passing direction for \\param or \\arg command.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompilationDatabase","page":"Home","title":"LibClang.CXCompilationDatabase","text":"A compilation database holds all information used to compile files in a project. For each file in the database, it can be queried for the working directory or the command line used for the compiler invocation.\n\nMust be freed by clang_CompilationDatabase_dispose.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompilationDatabase_Error","page":"Home","title":"LibClang.CXCompilationDatabase_Error","text":"Error codes for Compilation Database:\n\nCXCompilationDatabase_NoError: no error occurred\nCXCompilationDatabase_CanNotLoadDatabase: database can not be loaded\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompileCommand","page":"Home","title":"LibClang.CXCompileCommand","text":"Represents the command line invocation to compile a specific file.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompileCommands","page":"Home","title":"LibClang.CXCompileCommands","text":"Contains the results of a search in the compilation database.\n\nWhen searching for the compile command for a file, the compilation db can return several commands, as the file may have been compiled with different options in different places of the project. This choice of compile commands is wrapped in this opaque data structure. It must be freed by clang_CompileCommands_dispose.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompletionChunkKind","page":"Home","title":"LibClang.CXCompletionChunkKind","text":"Describes a single piece of text within a code-completion string.\n\nEach \"chunk\" within a code-completion string (CXCompletionString) is either a piece of text with a specific \"kind\" that describes how that text should be interpreted by the client or is another completion string.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompletionContext","page":"Home","title":"LibClang.CXCompletionContext","text":"Bits that represent the context under which completion is occurring.\n\nThe enumerators in this enumeration may be bitwise-OR'd together if multiple contexts are occurring simultaneously.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompletionResult","page":"Home","title":"LibClang.CXCompletionResult","text":"A single result of code completion.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCompletionString","page":"Home","title":"LibClang.CXCompletionString","text":"A semantic string that describes a code-completion result.\n\nA semantic string that describes the formatting of a code-completion result as a single \"template\" of text that should be inserted into the source buffer when a particular code-completion result is selected. Each semantic string is made up of some number of \"chunks\", each of which contains some text along with a description of what that text means, e.g., the name of the entity being referenced, whether the text chunk is part of the template, or whether it is a \"placeholder\" that the user should replace with actual code,of a specific kind. See CXCompletionChunkKind for a description of the different kinds of chunks.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCursor","page":"Home","title":"LibClang.CXCursor","text":"A cursor representing some element in the abstract syntax tree for a translation unit.\n\nThe cursor abstraction unifies the different kinds of entities in a program–declaration, statements, expressions, references to declarations, etc.–under a single \"cursor\" abstraction with a common set of operations. Common operation for a cursor include: getting the physical location in a source file where the cursor points, getting the name associated with a cursor, and retrieving cursors for any child nodes of a particular cursor.\n\nCursors can be produced in two specific ways. clang_getTranslationUnitCursor produces a cursor for a translation unit, from which one can use clang_visitChildren to explore the rest of the translation unit. clang_getCursor() maps from a physical source location to the entity that resides at that location, allowing one to map from the source code into the AST.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCursorKind","page":"Home","title":"LibClang.CXCursorKind","text":"Describes the kind of entity that a cursor refers to.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCursorSet","page":"Home","title":"LibClang.CXCursorSet","text":"A fast container representing a set of CXCursors.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCursorVisitor","page":"Home","title":"LibClang.CXCursorVisitor","text":"Visitor invoked for each cursor found by a traversal.\n\nThis visitor function will be invoked for each cursor found by clang_visitCursorChildren. Its first argument is the cursor being visited, its second argument is the parent visitor for that cursor, and its third argument is the client data provided to clang_visitCursorChildren.\n\nThe visitor should return one of the CXChildVisitResult values to direct clang_visitCursorChildren.\n\ntypedef enum CXChildVisitResult (*CXCursorVisitor)(CXCursor cursor, CXCursor parent, CXClientData client_data);\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXCursor_ExceptionSpecificationKind","page":"Home","title":"LibClang.CXCursor_ExceptionSpecificationKind","text":"Describes the exception specification of a cursor. A negative value indicates that the cursor is not a function declaration.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXDiagnostic","page":"Home","title":"LibClang.CXDiagnostic","text":"A single diagnostic, containing the diagnostic's severity, location, text, source ranges, and fix-it hints.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXDiagnosticDisplayOptions","page":"Home","title":"LibClang.CXDiagnosticDisplayOptions","text":"\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXDiagnosticSet","page":"Home","title":"LibClang.CXDiagnosticSet","text":"A group of CXDiagnostics.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXDiagnosticSeverity","page":"Home","title":"LibClang.CXDiagnosticSeverity","text":"Describes the severity of a particular diagnostic.\n\nCXDiagnostic_Ignored: a diagnostic that has been suppressed, e.g., by a command-line option.\nCXDiagnostic_Note: this diagnostic is a note that should be attached to the previous (non-note) diagnostic.\nCXDiagnostic_Warning: this diagnostic indicates suspicious code that may not be wrong.\nCXDiagnostic_Error: this diagnostic indicates that the code is ill-formed.\nCXDiagnostic_Fatal: this diagnostic indicates that the code is ill-formed such that future parser recovery is unlikely to produce useful results.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXErrorCode","page":"Home","title":"LibClang.CXErrorCode","text":"Error codes returned by libclang routines.\n\nZero CXError_Success is the only error code indicating success. Other error codes, including not yet assigned non-zero values, indicate errors.\n\nCXError_Success: no error\nCXError_Failure: a generic error code, no further details are available\nCXError_Crashed: libclang crashed while performing the requested operation\nCXError_InvalidArguments: the function detected that the arguments violate the function contract\nCXError_ASTReadError: an AST deserialization error has occurred\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXEvalResult","page":"Home","title":"LibClang.CXEvalResult","text":"Evaluation result of a cursor\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXFieldVisitor","page":"Home","title":"LibClang.CXFieldVisitor","text":"Visitor invoked for each field found by a traversal.\n\nThis visitor function will be invoked for each field found by clang_Type_visitFields. Its first argument is the cursor being visited, its second argument is the client data provided to clang_Type_visitFields.\n\nThe visitor should return one of the CXVisitorResult values to direct clang_Type_visitFields.\n\ntypedef enum CXVisitorResult (*CXFieldVisitor)(CXCursor C, CXClientData client_data);\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXFile","page":"Home","title":"LibClang.CXFile","text":"A particular source file that is part of a translation unit.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXFileUniqueID","page":"Home","title":"LibClang.CXFileUniqueID","text":"Uniquely identifies a CXFile, that refers to the same underlying file, across an indexing session.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXGlobalOptFlags","page":"Home","title":"LibClang.CXGlobalOptFlags","text":"Global Option Flags\n\nCXGlobalOpt_None: used to indicate that no special CXIndex options are needed.\nCXGlobalOpt_ThreadBackgroundPriorityForIndexing: used to indicate that threads that libclang creates for indexing purposes should use background priority. Affects clang_indexSourceFile, clang_indexTranslationUnit, clang_parseTranslationUnit, clang_saveTranslationUnit.\nCXGlobalOpt_ThreadBackgroundPriorityForEditing: used to indicate that threads that libclang creates for editing purposes should use background priority. Affects clang_reparseTranslationUnit, clang_codeCompleteAt, clang_annotateTokens\nCXGlobalOpt_ThreadBackgroundPriorityForAll: used to indicate that all threads that libclang creates should use background priority.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxClientASTFile","page":"Home","title":"LibClang.CXIdxClientASTFile","text":"The client's data object that is associated with an AST file (PCH or module).\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxClientContainer","page":"Home","title":"LibClang.CXIdxClientContainer","text":"The client's data object that is associated with a semantic container of entities.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxClientEntity","page":"Home","title":"LibClang.CXIdxClientEntity","text":"The client's data object that is associated with a semantic entity.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxClientFile","page":"Home","title":"LibClang.CXIdxClientFile","text":"The client's data object that is associated with a CXFile.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxEntityCXXTemplateKind","page":"Home","title":"LibClang.CXIdxEntityCXXTemplateKind","text":"Extra C++ template information for an entity. This can apply to:\n\nCXIdxEntity_Function\nCXIdxEntity_CXXClass\nCXIdxEntity_CXXStaticMethod\nCXIdxEntity_CXXInstanceMethod\nCXIdxEntity_CXXConstructor\nCXIdxEntity_CXXConversionFunction\nCXIdxEntity_CXXTypeAlias\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxEntityRefInfo","page":"Home","title":"LibClang.CXIdxEntityRefInfo","text":"Data for IndexerCallbacks#indexEntityReference.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxEntityRefKind","page":"Home","title":"LibClang.CXIdxEntityRefKind","text":"Data for IndexerCallbacks#indexEntityReference.\n\nThis may be deprecated in a future version as this duplicates the CXSymbolRole_Implicit bit in CXSymbolRole.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxImportedASTFileInfo","page":"Home","title":"LibClang.CXIdxImportedASTFileInfo","text":"Data for IndexerCallbacks#importedASTFile.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxIncludedFileInfo","page":"Home","title":"LibClang.CXIdxIncludedFileInfo","text":"Data for ppIncludedFile callback.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIdxLoc","page":"Home","title":"LibClang.CXIdxLoc","text":"Source location passed to index callbacks.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXInclusionVisitor","page":"Home","title":"LibClang.CXInclusionVisitor","text":"Visitor invoked for each file in a translation unit (used with clang_getInclusions).\n\nThis visitor function will be invoked by clang_getInclusions for each file included (either at the top-level or by `#include directives) within a translation unit. The first argument is the file being included, and the second and third arguments provide the inclusion stack. The array is sorted in order of immediate inclusion. For example, the first element refers to the location that included 'included_file'.\n\ntypedef void (*CXInclusionVisitor)(CXFile included_file,\n                                   CXSourceLocation* inclusion_stack,\n                                   unsigned include_len,\n                                   CXClientData client_data);\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIndex","page":"Home","title":"LibClang.CXIndex","text":"An \"index\" that consists of a set of translation units that would typically be linked together into an executable or library.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXIndexAction","page":"Home","title":"LibClang.CXIndexAction","text":"An indexing action/session, to be applied to one or multiple translation units.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXLanguageKind","page":"Home","title":"LibClang.CXLanguageKind","text":"Describe the \"language\" of the entity referred to by a cursor.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXLinkageKind","page":"Home","title":"LibClang.CXLinkageKind","text":"Describe the linkage of the entity referred to by a cursor.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXModuleMapDescriptor","page":"Home","title":"LibClang.CXModuleMapDescriptor","text":"Object encapsulating information about a module.map file.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXObjCDeclQualifierKind","page":"Home","title":"LibClang.CXObjCDeclQualifierKind","text":"Qualifiers written next to the return and parameter types in Objective-C method declarations.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXObjCPropertyAttrKind","page":"Home","title":"LibClang.CXObjCPropertyAttrKind","text":"Property attributes for a CXCursor_ObjCPropertyDecl.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXPlatformAvailability","page":"Home","title":"LibClang.CXPlatformAvailability","text":"Describes the availability of a given entity on a particular platform, e.g., a particular class might only be available on Mac OS 10.7 or newer.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXPrintingPolicy","page":"Home","title":"LibClang.CXPrintingPolicy","text":"Opaque pointer representing a policy that controls pretty printing for clang_getCursorPrettyPrinted.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXPrintingPolicyProperty","page":"Home","title":"LibClang.CXPrintingPolicyProperty","text":"Properties for the printing policy.\n\nSee clang::PrintingPolicy for more information.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXRemapping","page":"Home","title":"LibClang.CXRemapping","text":"A remapping of original source files and their translated files.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXReparse_Flags","page":"Home","title":"LibClang.CXReparse_Flags","text":"Flags that control the reparsing of translation units.\n\nThe enumerators in this enumeration type are meant to be bitwise ORed together to specify which options should be used when reparsing the translation unit.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXSaveError","page":"Home","title":"LibClang.CXSaveError","text":"Describes the kind of error that occurred (if any) in a call to clang_saveTranslationUnit.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXSourceLocation","page":"Home","title":"LibClang.CXSourceLocation","text":"Identifies a specific source location within a translation unit.\n\nUse clang_getExpansionLocation or clang_getSpellingLocation to map a source location to a particular file, line, and column.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXSourceRange","page":"Home","title":"LibClang.CXSourceRange","text":"Identifies a half-open character range in the source code.\n\nUse clang_getRangeStart and clang_getRangeEnd to retrieve the starting and end locations from a source range, respectively.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXSourceRangeList","page":"Home","title":"LibClang.CXSourceRangeList","text":"Identifies an array of ranges.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXString","page":"Home","title":"LibClang.CXString","text":"A character string.\n\nThe CXString type is used to return strings from the interface when the ownership of that string might differ from one call to the next. Use clang_getCString to retrieve the string data and, once finished with the string data, call clang_disposeString to free the string.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXSymbolRole","page":"Home","title":"LibClang.CXSymbolRole","text":"Roles that are attributed to symbol occurrences.\n\nInternal: this currently mirrors low 9 bits of clang::index::SymbolRole with higher bits zeroed. These high bits may be exposed in the future.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTLSKind","page":"Home","title":"LibClang.CXTLSKind","text":"Describe the \"thread-local storage (TLS) kind\" of the declaration referred to by a cursor.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTUResourceUsage","page":"Home","title":"LibClang.CXTUResourceUsage","text":"The memory usage of a CXTranslationUnit, broken into categories.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTUResourceUsageKind","page":"Home","title":"LibClang.CXTUResourceUsageKind","text":"Categorizes how memory is being used by a translation unit.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTargetInfo","page":"Home","title":"LibClang.CXTargetInfo","text":"An opaque type representing target information for a given translation unit.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTemplateArgumentKind","page":"Home","title":"LibClang.CXTemplateArgumentKind","text":"Describes the kind of a template argument.\n\nSee the definition of llvm::clang::TemplateArgument::ArgKind for full element descriptions.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXToken","page":"Home","title":"LibClang.CXToken","text":"Describes a single preprocessing token.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTokenKind","page":"Home","title":"LibClang.CXTokenKind","text":"Describes a kind of token.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTranslationUnit","page":"Home","title":"LibClang.CXTranslationUnit","text":"A single translation unit, which resides in an index.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXType","page":"Home","title":"LibClang.CXType","text":"The type of an element in the abstract syntax tree.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTypeKind","page":"Home","title":"LibClang.CXTypeKind","text":"Describes the kind of type\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXTypeLayoutError","page":"Home","title":"LibClang.CXTypeLayoutError","text":"List the possible error codes for clang_Type_getSizeOf, clang_Type_getAlignOf, clang_Type_getOffsetOf and clang_Cursor_getOffsetOf.\n\nA value of this enumeration type can be returned if the target type is not a valid argument to sizeof, alignof or offsetof.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXUnsavedFile","page":"Home","title":"LibClang.CXUnsavedFile","text":"Provides the contents of a file that has not yet been saved to disk.\n\nEach CXUnsavedFile instance provides the name of a file on the system along with the current contents of that file that have not yet been saved to disk.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXVersion","page":"Home","title":"LibClang.CXVersion","text":"CXVersion\n\nDescribes a version number of the form major.minor.subminor.\n\nMajor: the major version number, e.g., the '10' in '10.7.3'. A negative value indicates that there is no version number at all.\nMinor: the minor version number, e.g., the '7' in '10.7.3'. This value will be negative if no minor version number was provided, e.g., for version '10'.\nSubminor: the subminor version number, e.g., the '3' in '10.7.3'. This value will be negative if no minor or subminor version number was provided, e.g., in version '10' or '10.7'.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CXVirtualFileOverlay","page":"Home","title":"LibClang.CXVirtualFileOverlay","text":"Object encapsulating information about overlaying virtual file/directories over the real file system.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CX_CXXAccessSpecifier","page":"Home","title":"LibClang.CX_CXXAccessSpecifier","text":"Represents the C++ access control level to a base class for a cursor with kind CX_CXXBaseSpecifier.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.CX_StorageClass","page":"Home","title":"LibClang.CX_StorageClass","text":"Represents the storage classes as declared in the source. CX_SC_Invalid was added for the case that the passed cursor in not a declaration.\n\n\n\n\n\n","category":"type"},{"location":"index.html#LibClang.clang_BlockCommandComment_getArgText-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_BlockCommandComment_getArgText","text":"clang_BlockCommandComment_getArgText(Comment, ArgIdx)\n\nReturns text of the specified word-like argument.\n\nArguments\n\nComment: a CXComment_BlockCommand AST node\nAttrIdx: attribute index (zero-based)\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_BlockCommandComment_getCommandName-Tuple{Any}","page":"Home","title":"LibClang.clang_BlockCommandComment_getCommandName","text":"clang_BlockCommandComment_getCommandName(Comment)\n\nReturns name of the block command. Comment is a CXComment_BlockCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_BlockCommandComment_getNumArgs-Tuple{Any}","page":"Home","title":"LibClang.clang_BlockCommandComment_getNumArgs","text":"clang_BlockCommandComment_getNumArgs(Comment)\n\nReturns number of word-like arguments. Comment a CXComment_BlockCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_BlockCommandComment_getParagraph-Tuple{Any}","page":"Home","title":"LibClang.clang_BlockCommandComment_getParagraph","text":"clang_BlockCommandComment_getParagraph(Comment)\n\nReturns paragraph argument of the block command. Comment is a CXComment_BlockCommand or CXComment_VerbatimBlockCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXCursorSet_contains-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CXCursorSet_contains","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXCursorSet_insert-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CXCursorSet_insert","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXIndex_getGlobalOptions-Tuple{Any}","page":"Home","title":"LibClang.clang_CXIndex_getGlobalOptions","text":"clang_CXIndex_getGlobalOptions(idx)\n\nGets the general options associated with a CXIndex. Returns A bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags that are associated with the given CXIndex object.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXIndex_setGlobalOptions-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CXIndex_setGlobalOptions","text":"clang_CXIndex_setGlobalOptions(idx, options)\n\nSets general options associated with a CXIndex.\n\nFor example:\n\nCXIndex idx = ...;\nclang_CXIndex_setGlobalOptions(idx, clang_CXIndex_getGlobalOptions(idx) | CXGlobalOpt_ThreadBackgroundPriorityForIndexing);\n\noptions is a bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXIndex_setInvocationEmissionPathOption-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CXIndex_setInvocationEmissionPathOption","text":"clang_CXIndex_setInvocationEmissionPathOption(idx, Path)\n\nSets the invocation emission path option in a CXIndex.\n\nThe invocation emission path specifies a path which will contain log files for certain libclang invocations. A null value (default) implies that libclang invocations are not logged.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXConstructor_isConvertingConstructor-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXConstructor_isConvertingConstructor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXConstructor_isCopyConstructor-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXConstructor_isCopyConstructor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXConstructor_isDefaultConstructor-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXConstructor_isDefaultConstructor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXConstructor_isMoveConstructor-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXConstructor_isMoveConstructor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXField_isMutable-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXField_isMutable","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXMethod_isConst-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXMethod_isConst","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXMethod_isDefaulted-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXMethod_isDefaulted","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXMethod_isPureVirtual-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXMethod_isPureVirtual","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXMethod_isStatic-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXMethod_isStatic","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXMethod_isVirtual-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXMethod_isVirtual","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CXXRecord_isAbstract-Tuple{Any}","page":"Home","title":"LibClang.clang_CXXRecord_isAbstract","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Comment_getChild-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Comment_getChild","text":"clang_Comment_getChild(Comment, ChildIdx)\n\nReturns the specified child of the AST node.\n\nArguments\n\nComment: AST node of any kind\nChildIdx: child index (zero-based)\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Comment_getKind-Tuple{Any}","page":"Home","title":"LibClang.clang_Comment_getKind","text":"clang_Comment_getKind(Comment)\n\nReturns the type of the AST node. Comment is AST node of any kind.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Comment_getNumChildren-Tuple{Any}","page":"Home","title":"LibClang.clang_Comment_getNumChildren","text":"clang_Comment_getNumChildren(Comment)\n\nReturns number of children of the AST node. Comment is AST node of any kind.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Comment_isWhitespace-Tuple{Any}","page":"Home","title":"LibClang.clang_Comment_isWhitespace","text":"clang_Comment_isWhitespace(Comment)\n\nA CXComment_Paragraph node is considered whitespace if it contains only CXComment_Text nodes that are empty or whitespace. Returns non-zero if Comment is whitespace.\n\nOther AST nodes (except CXComment_Paragraph and CXComment_Text) are never considered whitespace.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompilationDatabase_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_CompilationDatabase_dispose","text":"clang_CompilationDatabase_dispose(db)\n\nFree the given compilation database.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompilationDatabase_fromDirectory-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CompilationDatabase_fromDirectory","text":"clang_CompilationDatabase_fromDirectory(BuildDir, ErrorCode)\n\nCreates a compilation database from the database found in directory BuildDir. For example, CMake can output a compile_commands.json which can be used to build the database.\n\nIt must be freed by clang_CompilationDatabase_dispose.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompilationDatabase_getAllCompileCommands-Tuple{Any}","page":"Home","title":"LibClang.clang_CompilationDatabase_getAllCompileCommands","text":"clang_CompilationDatabase_getAllCompileCommands(db)\n\nGet all the compile commands in the given compilation database.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompilationDatabase_getCompileCommands-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CompilationDatabase_getCompileCommands","text":"clang_CompilationDatabase_getCompileCommands(db, CompleteFileName)\n\nFind the compile commands used for a file. The compile commands must be freed by clang_CompileCommands_dispose.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompileCommand_getArg-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CompileCommand_getArg","text":"clang_CompileCommand_getArg(cmd, i)\n\nGet the i-th argument value in the compiler invocations. Invariant:\n\nargument 0 is the compiler executable\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompileCommand_getDirectory-Tuple{Any}","page":"Home","title":"LibClang.clang_CompileCommand_getDirectory","text":"clang_CompileCommand_getDirectory(cmd)\n\nGet the working directory where the CompileCommand was executed from.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompileCommand_getFilename-Tuple{Any}","page":"Home","title":"LibClang.clang_CompileCommand_getFilename","text":"clang_CompileCommand_getFilename(cmd)\n\nGet the filename associated with the CompileCommand.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompileCommand_getNumArgs-Tuple{Any}","page":"Home","title":"LibClang.clang_CompileCommand_getNumArgs","text":"clang_CompileCommand_getNumArgs(cmd)\n\nGet the number of arguments in the compiler invocation.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompileCommands_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_CompileCommands_dispose","text":"clang_CompileCommands_dispose(cmds)\n\nFree the given CompileCommands.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompileCommands_getCommand-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_CompileCommands_getCommand","text":"clang_CompileCommands_getCommand(cmds, i)\n\nGet the i-th CompileCommand for a file.\n\nnote: Note\n\n\n0 <= i < clang_CompileCommands_getSize(cmds)\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_CompileCommands_getSize-Tuple{Any}","page":"Home","title":"LibClang.clang_CompileCommands_getSize","text":"clang_CompileCommands_getSize(cmds)\n\nGet the number of CompileCommand we have for a file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_Evaluate-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_Evaluate","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getArgument-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Cursor_getArgument","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getBriefCommentText-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getBriefCommentText","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getCXXManglings-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getCXXManglings","text":"clang_Cursor_getCXXManglings(cursor)\n\nRetrieve the CXStrings representing the mangled symbols of the C++ constructor or destructor at the cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getCommentRange-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getCommentRange","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getMangling-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getMangling","text":"clang_Cursor_getMangling(cursor)\n\nRetrieve the CXStrings representing the mangled name of the cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getModule-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getModule","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getNumArguments-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getNumArguments","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getNumTemplateArguments-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getNumTemplateArguments","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getObjCDeclQualifiers-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getObjCDeclQualifiers","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getObjCManglings-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getObjCManglings","text":"clang_Cursor_getObjCManglings(cursor)\n\nRetrieve the CXStrings representing the mangled symbols of the ObjC class interface or implementation at the cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getObjCPropertyAttributes-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Cursor_getObjCPropertyAttributes","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getObjCPropertyGetterName-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getObjCPropertyGetterName","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getObjCPropertySetterName-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getObjCPropertySetterName","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getObjCSelectorIndex-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getObjCSelectorIndex","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getOffsetOfField-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getOffsetOfField","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getParsedComment-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getParsedComment","text":"clang_Cursor_getParsedComment(cursor)\n\nGiven a cursor that represents a documentable entity (e.g., declaration), return the associated parsed comment as a CXComment_FullComment AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getRawCommentText-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getRawCommentText","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getReceiverType-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getReceiverType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getSpellingNameRange-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_Cursor_getSpellingNameRange","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getStorageClass-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getStorageClass","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getTemplateArgumentKind-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Cursor_getTemplateArgumentKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getTemplateArgumentType-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Cursor_getTemplateArgumentType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getTemplateArgumentUnsignedValue-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Cursor_getTemplateArgumentUnsignedValue","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getTemplateArgumentValue-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Cursor_getTemplateArgumentValue","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_getTranslationUnit-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_getTranslationUnit","text":"clang_Cursor_getTranslationUnit(cursor)\n\nReturns the translation unit that a cursor originated from.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_hasAttrs-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_hasAttrs","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isAnonymous-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isAnonymous","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isBitField-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isBitField","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isDynamicCall-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isDynamicCall","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isExternalSymbol-NTuple{4,Any}","page":"Home","title":"LibClang.clang_Cursor_isExternalSymbol","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isFunctionInlined-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isFunctionInlined","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isMacroBuiltin-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isMacroBuiltin","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isMacroFunctionLike-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isMacroFunctionLike","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isNull-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isNull","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isObjCOptional-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isObjCOptional","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Cursor_isVariadic-Tuple{Any}","page":"Home","title":"LibClang.clang_Cursor_isVariadic","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EnumDecl_isScoped-Tuple{Any}","page":"Home","title":"LibClang.clang_EnumDecl_isScoped","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_dispose","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_getAsDouble-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_getAsDouble","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_getAsInt-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_getAsInt","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_getAsLongLong-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_getAsLongLong","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_getAsStr-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_getAsStr","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_getAsUnsigned-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_getAsUnsigned","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_getKind-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_getKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_EvalResult_isUnsignedInt-Tuple{Any}","page":"Home","title":"LibClang.clang_EvalResult_isUnsignedInt","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_File_isEqual-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_File_isEqual","text":"clang_File_isEqual(file1, file2)\n\nReturns non-zero if the file1 and file2 point to the same file, or they are both NULL.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_File_tryGetRealPathName-Tuple{Any}","page":"Home","title":"LibClang.clang_File_tryGetRealPathName","text":"clang_File_tryGetRealPathName(file)\n\nReturns the real path name of file. An empty string may be returned. Use clang_getFileName in that case.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_FullComment_getAsHTML-Tuple{Any}","page":"Home","title":"LibClang.clang_FullComment_getAsHTML","text":"clang_FullComment_getAsHTML(Comment)\n\nConvert a given full parsed comment to an HTML fragment. Returns string containing an HTML fragment. Specific details of HTML layout are subject to change. Don't try to parse this HTML back into an AST, use other APIs instead. Comment is a CXComment_FullComment AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_FullComment_getAsXML-Tuple{Any}","page":"Home","title":"LibClang.clang_FullComment_getAsXML","text":"clang_FullComment_getAsXML(Comment)\n\nConvert a given full parsed comment to an XML document. Returns string containing an XML document. A Relax NG schema for the XML can be found in comment-xml-schema.rng file inside clang source tree. Comment is a CXComment_FullComment AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_HTMLStartTagComment_isSelfClosing-Tuple{Any}","page":"Home","title":"LibClang.clang_HTMLStartTagComment_isSelfClosing","text":"clang_HTMLStartTagComment_isSelfClosing(Comment)\n\nReturns non-zero if tag is self-closing (for example, &lt;br /&gt;).\n\nComment a CXComment_HTMLStartTag AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_HTMLStartTag_getAttrName-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_HTMLStartTag_getAttrName","text":"clang_HTMLStartTag_getAttrName(Comment, AttrIdx)\n\nReturns name of the specified attribute.\n\nArguments\n\nComment: a CXComment_HTMLStartTag AST node\nAttrIdx: attribute index (zero-based)\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_HTMLStartTag_getAttrValue-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_HTMLStartTag_getAttrValue","text":"clang_HTMLStartTag_getAttrValue(Comment, AttrIdx)\n\nReturns value of the specified attribute.\n\nArguments\n\nComment: a CXComment_HTMLStartTag AST node\nAttrIdx: attribute index (zero-based)\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_HTMLStartTag_getNumAttrs-Tuple{Any}","page":"Home","title":"LibClang.clang_HTMLStartTag_getNumAttrs","text":"clang_HTMLStartTag_getNumAttrs(Comment)\n\nReturns number of attributes (name-value pairs) attached to the start tag.\n\nComment a CXComment_HTMLStartTag AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_HTMLTagComment_getAsString-Tuple{Any}","page":"Home","title":"LibClang.clang_HTMLTagComment_getAsString","text":"clang_HTMLTagComment_getAsString(Comment)\n\nConvert an HTML tag AST node to string. Returns string containing an HTML tag. Comment is a CXComment_HTMLStartTag or CXComment_HTMLEndTag AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_HTMLTagComment_getTagName-Tuple{Any}","page":"Home","title":"LibClang.clang_HTMLTagComment_getTagName","text":"clang_HTMLTagComment_getTagName(Comment)\n\nReturns HTML tag name.\n\nComment is a CXComment_HTMLStartTag or CXComment_HTMLEndTag AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_IndexAction_create-Tuple{Any}","page":"Home","title":"LibClang.clang_IndexAction_create","text":"clang_IndexAction_create(CIdx)\n\nAn indexing action/session, to be applied to one or multiple translation units. CIdx is the index object with which the index action will be associated.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_IndexAction_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_IndexAction_dispose","text":"clang_IndexAction_dispose(action)\n\nDestroy the given index action.\n\nThe index action must not be destroyed until all of the translation units created within that index action have been destroyed.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_InlineCommandComment_getArgText-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_InlineCommandComment_getArgText","text":"clang_InlineCommandComment_getArgText(Comment, ArgIdx)\n\nReturns text of the specified argument.\n\nArguments\n\nComment: a CXComment_InlineCommand AST node\nArgIdx: argument index (zero-based)\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_InlineCommandComment_getCommandName-Tuple{Any}","page":"Home","title":"LibClang.clang_InlineCommandComment_getCommandName","text":"clang_InlineCommandComment_getCommandName(Comment)\n\nReturns name of the inline command. Comment is a CXComment_InlineCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_InlineCommandComment_getNumArgs-Tuple{Any}","page":"Home","title":"LibClang.clang_InlineCommandComment_getNumArgs","text":"clang_InlineCommandComment_getNumArgs(Comment)\n\nReturns number of command arguments. Comment is a CXComment_InlineCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_InlineCommandComment_getRenderKind-Tuple{Any}","page":"Home","title":"LibClang.clang_InlineCommandComment_getRenderKind","text":"clang_InlineCommandComment_getRenderKind(Comment)\n\nReturns the most appropriate rendering mode, chosen on command semantics in Doxygen. Comment is a CXComment_InlineCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_InlineContentComment_hasTrailingNewline-Tuple{Any}","page":"Home","title":"LibClang.clang_InlineContentComment_hasTrailingNewline","text":"clang_InlineContentComment_hasTrailingNewline(Comment)\n\nReturns non-zero if Comment is inline content and has a newline immediately following it in the comment text. Newlines between paragraphs do not count.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Location_isFromMainFile-Tuple{Any}","page":"Home","title":"LibClang.clang_Location_isFromMainFile","text":"clang_Location_isFromMainFile(location)\n\nReturns non-zero if the given source location is in the main file of the corresponding translation unit.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Location_isInSystemHeader-Tuple{Any}","page":"Home","title":"LibClang.clang_Location_isInSystemHeader","text":"clang_Location_isInSystemHeader(location)\n\nReturns non-zero if the given source location is in a system header.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ModuleMapDescriptor_create-Tuple{Any}","page":"Home","title":"LibClang.clang_ModuleMapDescriptor_create","text":"clang_ModuleMapDescriptor_create(options)\n\nCreate a CXModuleMapDescriptor object. Must be disposed with clang_ModuleMapDescriptor_dispose. options is reserved, always pass 0.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ModuleMapDescriptor_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_ModuleMapDescriptor_dispose","text":"clang_ModuleMapDescriptor_dispose(descriptor)\n\nDispose a CXModuleMapDescriptor object.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ModuleMapDescriptor_setFrameworkModuleName-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_ModuleMapDescriptor_setFrameworkModuleName","text":"clang_ModuleMapDescriptor_setFrameworkModuleName(descriptor, name)\n\nSets the framework module name that the module.map describes. Returns 0 for success, non-zero to indicate an error.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ModuleMapDescriptor_setUmbrellaHeader-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_ModuleMapDescriptor_setUmbrellaHeader","text":"clang_ModuleMapDescriptor_setUmbrellaHeader(descriptor, name)\n\nSets the umbrealla header name that the module.map describes. Returns 0 for success, non-zero to indicate an error.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ModuleMapDescriptor_writeToBuffer-NTuple{4,Any}","page":"Home","title":"LibClang.clang_ModuleMapDescriptor_writeToBuffer","text":"clang_ModuleMapDescriptor_writeToBuffer(descriptor, options, out_buffer_ptr, out_buffer_size)\n\nWrite out the CXModuleMapDescriptor object to a char buffer. Returns 0 for success, non-zero to indicate an error.\n\nArguments\n\noptions: is reserved, always pass 0.\nout_buffer_ptr: pointer to receive the buffer pointer, which should be disposed using clang_free.\nout_buffer_size: pointer to receive the buffer size.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Module_getASTFile-Tuple{Any}","page":"Home","title":"LibClang.clang_Module_getASTFile","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Module_getFullName-Tuple{Any}","page":"Home","title":"LibClang.clang_Module_getFullName","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Module_getName-Tuple{Any}","page":"Home","title":"LibClang.clang_Module_getName","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Module_getNumTopLevelHeaders-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Module_getNumTopLevelHeaders","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Module_getParent-Tuple{Any}","page":"Home","title":"LibClang.clang_Module_getParent","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Module_getTopLevelHeader-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_Module_getTopLevelHeader","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Module_isSystem-Tuple{Any}","page":"Home","title":"LibClang.clang_Module_isSystem","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ParamCommandComment_getDirection-Tuple{Any}","page":"Home","title":"LibClang.clang_ParamCommandComment_getDirection","text":"clang_ParamCommandComment_getDirection(Comment)\n\nReturns parameter passing direction. Comment is a CXComment_ParamCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ParamCommandComment_getParamIndex-Tuple{Any}","page":"Home","title":"LibClang.clang_ParamCommandComment_getParamIndex","text":"clang_ParamCommandComment_getParamIndex(Comment)\n\nReturns zero-based parameter index in function prototype. Comment is a CXComment_ParamCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ParamCommandComment_getParamName-Tuple{Any}","page":"Home","title":"LibClang.clang_ParamCommandComment_getParamName","text":"clang_ParamCommandComment_getParamName(Comment)\n\nReturns parameter name. Comment is a CXComment_ParamCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ParamCommandComment_isDirectionExplicit-Tuple{Any}","page":"Home","title":"LibClang.clang_ParamCommandComment_isDirectionExplicit","text":"clang_ParamCommandComment_isDirectionExplicit(Comment)\n\nReturns non-zero if parameter passing direction was specified explicitly in the comment. Comment is a CXComment_ParamCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_ParamCommandComment_isParamIndexValid-Tuple{Any}","page":"Home","title":"LibClang.clang_ParamCommandComment_isParamIndexValid","text":"clang_ParamCommandComment_isParamIndexValid(Comment)\n\nReturns non-zero if the parameter that this AST node represents was found in the function prototype and clang_ParamCommandComment_getParamIndex function will return a meaningful value. Comment is a CXComment_ParamCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_PrintingPolicy_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_PrintingPolicy_dispose","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_PrintingPolicy_getProperty-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_PrintingPolicy_getProperty","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_PrintingPolicy_setProperty-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_PrintingPolicy_setProperty","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Range_isNull-Tuple{Any}","page":"Home","title":"LibClang.clang_Range_isNull","text":"clang_Range_isNull(range)\n\nReturns non-zero if range is null.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TParamCommandComment_getDepth-Tuple{Any}","page":"Home","title":"LibClang.clang_TParamCommandComment_getDepth","text":"clang_TParamCommandComment_getDepth(Comment)\n\nReturns zero-based nesting depth of this parameter in the template parameter list. Comment is a CXComment_TParamCommand AST node. For example,\n\n\u000berbatim\n    template<typename C, template<typename T> class TT>\n    void test(TT<int> aaa);\n\u001bndverbatim\nfor C and TT nesting depth is 0,\nfor T nesting depth is 1.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TParamCommandComment_getIndex-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_TParamCommandComment_getIndex","text":"clang_TParamCommandComment_getIndex(Comment, Depth)\n\nReturns zero-based parameter index in the template parameter list at a given nesting depth. Comment is a CXComment_TParamCommand AST node. For example,\n\n\u000berbatim\n    template<typename C, template<typename T> class TT>\n    void test(TT<int> aaa);\n\u001bndverbatim\nfor C and TT nesting depth is 0, so we can ask for index at depth 0:\nat depth 0 C's index is 0, TT's index is 1.\n\nFor T nesting depth is 1, so we can ask for index at depth 0 and 1:\nat depth 0 T's index is 1 (same as TT's),\nat depth 1 T's index is 0.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TParamCommandComment_getParamName-Tuple{Any}","page":"Home","title":"LibClang.clang_TParamCommandComment_getParamName","text":"clang_TParamCommandComment_getParamName(Comment)\n\nReturns template parameter name. Comment is a CXComment_TParamCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TParamCommandComment_isParamPositionValid-Tuple{Any}","page":"Home","title":"LibClang.clang_TParamCommandComment_isParamPositionValid","text":"clang_TParamCommandComment_isParamPositionValid(Comment)\n\nReturns non-zero if the parameter that this AST node represents was found in the template parameter list and clang_TParamCommandComment_getDepth and clang_TParamCommandComment_getIndex functions will return a meaningful value. Comment is a CXComment_TParamCommand AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TargetInfo_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_TargetInfo_dispose","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TargetInfo_getPointerWidth-Tuple{Any}","page":"Home","title":"LibClang.clang_TargetInfo_getPointerWidth","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TargetInfo_getTriple-Tuple{Any}","page":"Home","title":"LibClang.clang_TargetInfo_getTriple","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_TextComment_getText-Tuple{Any}","page":"Home","title":"LibClang.clang_TextComment_getText","text":"clang_TextComment_getText(Comment)\n\nReturns text contained in the AST node. Comment is a CXComment_Text AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getAlignOf-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getAlignOf","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getCXXRefQualifier-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getCXXRefQualifier","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getClassType-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getClassType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getModifiedType-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getModifiedType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getNamedType-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getNamedType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getNullability-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getNullability","text":"clang_Type_getNullability(T)\n\nRetrieve the nullability kind of a pointer type.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getNumObjCProtocolRefs-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getNumObjCProtocolRefs","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getNumObjCTypeArgs-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getNumObjCTypeArgs","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getNumTemplateArguments-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getNumTemplateArguments","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getObjCEncoding-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getObjCEncoding","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getObjCObjectBaseType-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getObjCObjectBaseType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getObjCProtocolDecl-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Type_getObjCProtocolDecl","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getObjCTypeArg-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Type_getObjCTypeArg","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getOffsetOf-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Type_getOffsetOf","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getSizeOf-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_getSizeOf","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_getTemplateArgumentAsType-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_Type_getTemplateArgumentAsType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_isTransparentTagTypedef-Tuple{Any}","page":"Home","title":"LibClang.clang_Type_isTransparentTagTypedef","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_Type_visitFields-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_Type_visitFields","text":"clang_Type_visitFields(T, visitor, client_data)\n\nVisit the fields of a particular type. Returns a non-zero value if the traversal was terminated prematurely by the visitor returning CXFieldVisit_Break.\n\nThis function visits all the direct fields of the given cursor, invoking the given visitor function with the cursors of each visited field. The traversal may be ended prematurely, if the visitor returns CXFieldVisit_Break.\n\nArguments\n\nT: the record type whose field may be visited\nvisitor: the visitor function that will be invoked for each field of T.\nclient_data: pointer data supplied by the client, which will be passed to the visitor each time it is invoked.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_VerbatimBlockLineComment_getText-Tuple{Any}","page":"Home","title":"LibClang.clang_VerbatimBlockLineComment_getText","text":"clang_VerbatimBlockLineComment_getText(Comment)\n\nReturns text contained in the AST node. Comment is a CXComment_VerbatimBlockLine AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_VerbatimLineComment_getText-Tuple{Any}","page":"Home","title":"LibClang.clang_VerbatimLineComment_getText","text":"clang_VerbatimLineComment_getText(Comment)\n\nReturns text contained in the AST node. Comment is a CXComment_VerbatimLine AST node.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_VirtualFileOverlay_addFileMapping-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_VirtualFileOverlay_addFileMapping","text":"clang_VirtualFileOverlay_addFileMapping(overlay, virtualPath, realPath)\n\nMap an absolute virtual file path to an absolute real one. The virtual path must be canonicalized (not contain \".\"/\"..\"). Returns 0 for success, non-zero to indicate an error.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_VirtualFileOverlay_create-Tuple{Any}","page":"Home","title":"LibClang.clang_VirtualFileOverlay_create","text":"clang_VirtualFileOverlay_create(options)\n\nCreate a CXVirtualFileOverlay object.\n\nMust be disposed with clang_VirtualFileOverlay_dispose.\n\noptions is reserved, always pass 0.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_VirtualFileOverlay_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_VirtualFileOverlay_dispose","text":"clang_VirtualFileOverlay_dispose(overlay)\n\nDispose a CXVirtualFileOverlay object.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_VirtualFileOverlay_setCaseSensitivity-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_VirtualFileOverlay_setCaseSensitivity","text":"clang_VirtualFileOverlay_setCaseSensitivity(overlay, caseSensitive)\n\nSet the case sensitivity for the CXVirtualFileOverlay object. The CXVirtualFileOverlay object is case-sensitive by default, this option can be used to override the default. Returns 0 for success, non-zero to indicate an error.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_VirtualFileOverlay_writeToBuffer-NTuple{4,Any}","page":"Home","title":"LibClang.clang_VirtualFileOverlay_writeToBuffer","text":"clang_VirtualFileOverlay_writeToBuffer(overlay, options, out_buffer_ptr, out_buffer_size)\n\nWrite out the CXVirtualFileOverlay object to a char buffer. Returns 0 for success, non-zero to indicate an error.\n\nArguments:\n\noptions: is reserved, always pass 0\nout_buffer_ptr: pointer to receive the buffer pointer, which should be disposed using clang_free\nout_buffer_size: pointer to receive the buffer size\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_annotateTokens-NTuple{4,Any}","page":"Home","title":"LibClang.clang_annotateTokens","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_codeCompleteAt-NTuple{7,Any}","page":"Home","title":"LibClang.clang_codeCompleteAt","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_codeCompleteGetContainerKind-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_codeCompleteGetContainerKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_codeCompleteGetContainerUSR-Tuple{Any}","page":"Home","title":"LibClang.clang_codeCompleteGetContainerUSR","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_codeCompleteGetContexts-Tuple{Any}","page":"Home","title":"LibClang.clang_codeCompleteGetContexts","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_codeCompleteGetDiagnostic-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_codeCompleteGetDiagnostic","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_codeCompleteGetNumDiagnostics-Tuple{Any}","page":"Home","title":"LibClang.clang_codeCompleteGetNumDiagnostics","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_codeCompleteGetObjCSelector-Tuple{Any}","page":"Home","title":"LibClang.clang_codeCompleteGetObjCSelector","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_constructUSR_ObjCCategory-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_constructUSR_ObjCCategory","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_constructUSR_ObjCClass-Tuple{Any}","page":"Home","title":"LibClang.clang_constructUSR_ObjCClass","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_constructUSR_ObjCIvar-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_constructUSR_ObjCIvar","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_constructUSR_ObjCMethod-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_constructUSR_ObjCMethod","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_constructUSR_ObjCProperty-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_constructUSR_ObjCProperty","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_constructUSR_ObjCProtocol-Tuple{Any}","page":"Home","title":"LibClang.clang_constructUSR_ObjCProtocol","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_createCXCursorSet-Tuple{}","page":"Home","title":"LibClang.clang_createCXCursorSet","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_createIndex-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_createIndex","text":"clang_createIndex(excludeDeclarationsFromPCH, displayDiagnostics)\n\nProvides a shared context for creating translation units.\n\nIt provides two options:\n\nexcludeDeclarationsFromPCH: When non-zero, allows enumeration of \"local\" declarations\n\n(when loading any new translation units). A \"local\" declaration is one that belongs in the translation unit itself and not in a precompiled header that was used by the translation unit. If zero, all declarations will be enumerated.\n\nHere is an example:\n\n// excludeDeclsFromPCH = 1, displayDiagnostics=1\nIdx = clang_createIndex(1, 1);\n\n// IndexTest.pch was produced with the following command:\n// \"clang -x c IndexTest.h -emit-ast -o IndexTest.pch\"\nTU = clang_createTranslationUnit(Idx, \"IndexTest.pch\");\n\n// This will load all the symbols from 'IndexTest.pch'\nclang_visitChildren(clang_getTranslationUnitCursor(TU), TranslationUnitVisitor, 0);\nclang_disposeTranslationUnit(TU);\n\n// This will load all the symbols from 'IndexTest.c', excluding symbols\n// from 'IndexTest.pch'.\nchar *args[] = { \"-Xclang\", \"-include-pch=IndexTest.pch\" };\nTU = clang_createTranslationUnitFromSourceFile(Idx, \"IndexTest.c\", 2, args, 0, 0);\nclang_visitChildren(clang_getTranslationUnitCursor(TU), TranslationUnitVisitor, 0);\nclang_disposeTranslationUnit(TU);\n\nThis process of creating the 'pch', loading it separately, and using it (via -include-pch) allows 'excludeDeclsFromPCH' to remove redundant callbacks(which gives the indexer the same performance benefit as the compiler).\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_createTranslationUnit-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_createTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_createTranslationUnit2-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_createTranslationUnit2","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_createTranslationUnitFromSourceFile-NTuple{6,Any}","page":"Home","title":"LibClang.clang_createTranslationUnitFromSourceFile","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_defaultCodeCompleteOptions-Tuple{}","page":"Home","title":"LibClang.clang_defaultCodeCompleteOptions","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_defaultDiagnosticDisplayOptions-Tuple{}","page":"Home","title":"LibClang.clang_defaultDiagnosticDisplayOptions","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_defaultEditingTranslationUnitOptions-Tuple{}","page":"Home","title":"LibClang.clang_defaultEditingTranslationUnitOptions","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_defaultReparseOptions-Tuple{Any}","page":"Home","title":"LibClang.clang_defaultReparseOptions","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_defaultSaveOptions-Tuple{Any}","page":"Home","title":"LibClang.clang_defaultSaveOptions","text":"clang_defaultSaveOptions(TU)\n\nReturns the set of flags that is suitable for saving a translation unit.\n\nThe set of flags returned provide options for clang_saveTranslationUnit by default. The returned flag set contains an unspecified set of options that save translation units with the most commonly-requested data.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeCXCursorSet-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeCXCursorSet","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeCXPlatformAvailability-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeCXPlatformAvailability","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeCXTUResourceUsage-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeCXTUResourceUsage","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeCodeCompleteResults-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeCodeCompleteResults","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeDiagnostic-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeDiagnostic","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeDiagnosticSet-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeDiagnosticSet","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeIndex-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeIndex","text":"clang_disposeIndex(index)\n\nDestroy the given index.\n\nThe index must not be destroyed until all of the translation units created within that index have been destroyed.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeOverriddenCursors-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeOverriddenCursors","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeSourceRangeList-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeSourceRangeList","text":"clang_disposeSourceRangeList(ranges)\n\nDestroy the given CXSourceRangeList.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeString-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeString","text":"clang_disposeString(string)\n\nFree the given string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeStringSet-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeStringSet","text":"clang_disposeStringSet(set)\n\nFree the given string set.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeTokens-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_disposeTokens","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_disposeTranslationUnit-Tuple{Any}","page":"Home","title":"LibClang.clang_disposeTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_enableStackTraces-Tuple{}","page":"Home","title":"LibClang.clang_enableStackTraces","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_equalCursors-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_equalCursors","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_equalLocations-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_equalLocations","text":"clang_equalLocations(loc1, loc2)\n\nDetermine whether two source locations, which must refer into the same translation unit, refer to exactly the same point in the source code.\n\nReturns non-zero if the source locations refer to the same location, zero if they refer to different locations.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_equalRanges-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_equalRanges","text":"clang_equalRanges(range1, range2)\n\nDetermine whether two ranges are equivalent. Returns non-zero if the ranges are the same, zero if they differ.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_equalTypes-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_equalTypes","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_executeOnThread-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_executeOnThread","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_findIncludesInFile-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_findIncludesInFile","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_findReferencesInFile-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_findReferencesInFile","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_formatDiagnostic-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_formatDiagnostic","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_free-Tuple{Any}","page":"Home","title":"LibClang.clang_free","text":"clang_free(buffer)\n\nFree memory allocated by libclang, such as the buffer returned by CXVirtualFileOverlay or clang_ModuleMapDescriptor_writeToBuffer.\n\nArguments:\n\nbuffer: memory pointer to free.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getAddressSpace-Tuple{Any}","page":"Home","title":"LibClang.clang_getAddressSpace","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getAllSkippedRanges-Tuple{Any}","page":"Home","title":"LibClang.clang_getAllSkippedRanges","text":"clang_getAllSkippedRanges(tu)\n\nRetrieve all ranges from all files that were skipped by the preprocessor.\n\nThe preprocessor will skip lines when they are surrounded by an if/ifdef/ifndef directive whose condition does not evaluate to true.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getArgType-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getArgType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getArrayElementType-Tuple{Any}","page":"Home","title":"LibClang.clang_getArrayElementType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getArraySize-Tuple{Any}","page":"Home","title":"LibClang.clang_getArraySize","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getBuildSessionTimestamp-Tuple{}","page":"Home","title":"LibClang.clang_getBuildSessionTimestamp","text":"clang_getBuildSessionTimestamp()\n\nReturn the timestamp for use with Clang's -fbuild-session-timestamp= option.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCString-Tuple{Any}","page":"Home","title":"LibClang.clang_getCString","text":"clang_getCString(string)\n\nRetrieve the character data associated with the given string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCXTUResourceUsage-Tuple{Any}","page":"Home","title":"LibClang.clang_getCXTUResourceUsage","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCXXAccessSpecifier-Tuple{Any}","page":"Home","title":"LibClang.clang_getCXXAccessSpecifier","text":"clang_getCXXAccessSpecifier(cursor)\n\nReturns the access control level for the referenced object.\n\nIf the cursor refers to a C++ declaration, its access control level within its parent scope is returned. Otherwise, if the cursor refers to a base specifier or access specifier, the specifier itself is returned.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCanonicalCursor-Tuple{Any}","page":"Home","title":"LibClang.clang_getCanonicalCursor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCanonicalType-Tuple{Any}","page":"Home","title":"LibClang.clang_getCanonicalType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getChildDiagnostics-Tuple{Any}","page":"Home","title":"LibClang.clang_getChildDiagnostics","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getClangVersion-Tuple{}","page":"Home","title":"LibClang.clang_getClangVersion","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionAnnotation-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCompletionAnnotation","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionAvailability-Tuple{Any}","page":"Home","title":"LibClang.clang_getCompletionAvailability","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionBriefComment-Tuple{Any}","page":"Home","title":"LibClang.clang_getCompletionBriefComment","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionChunkCompletionString-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCompletionChunkCompletionString","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionChunkKind-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCompletionChunkKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionChunkText-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCompletionChunkText","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionFixIt-NTuple{4,Any}","page":"Home","title":"LibClang.clang_getCompletionFixIt","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionNumAnnotations-Tuple{Any}","page":"Home","title":"LibClang.clang_getCompletionNumAnnotations","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionNumFixIts-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCompletionNumFixIts","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionParent-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCompletionParent","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCompletionPriority-Tuple{Any}","page":"Home","title":"LibClang.clang_getCompletionPriority","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursor-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCursor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorAvailability-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorAvailability","text":"clang_getCursorAvailability(cursor)\n\nDetermine the availability of the entity that this cursor refers to, taking the current target platform into account. cursor is the cursor to query. Returns the visibility of the cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorCompletionString-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorCompletionString","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorDefinition-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorDefinition","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorDisplayName-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorDisplayName","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorExceptionSpecificationType-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorExceptionSpecificationType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorExtent-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorExtent","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorKind-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorKindSpelling-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorKindSpelling","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorLanguage-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorLanguage","text":"clang_getCursorLanguage(cursor)\n\nDetermine the \"language\" of the entity referred to by a given cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorLexicalParent-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorLexicalParent","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorLinkage-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorLinkage","text":"clang_getCursorLinkage(cursor)\n\nDetermine the linkage of the entity referred to by a given cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorLocation-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorLocation","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorPlatformAvailability-NTuple{7,Any}","page":"Home","title":"LibClang.clang_getCursorPlatformAvailability","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorPrettyPrinted-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getCursorPrettyPrinted","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorPrintingPolicy-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorPrintingPolicy","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorReferenceNameRange-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_getCursorReferenceNameRange","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorReferenced-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorReferenced","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorResultType-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorResultType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorSemanticParent-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorSemanticParent","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorSpelling-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorSpelling","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorTLSKind-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorTLSKind","text":"clang_getCursorTLSKind(cursor)\n\nDetermine the \"thread-local storage (TLS) kind\" of the declaration referred to by a cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorType-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorUSR-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorUSR","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getCursorVisibility-Tuple{Any}","page":"Home","title":"LibClang.clang_getCursorVisibility","text":"clang_getCursorVisibility(cursor)\n\nDescribe the visibility of the entity referred to by a cursor.\n\nThis returns the default visibility if not explicitly specified by a visibility attribute. The default visibility may be changed by commandline arguments.\n\ncursor is the cursor to query. Returns the visibility of the cursor.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDeclObjCTypeEncoding-Tuple{Any}","page":"Home","title":"LibClang.clang_getDeclObjCTypeEncoding","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDefinitionSpellingAndExtent-NTuple{7,Any}","page":"Home","title":"LibClang.clang_getDefinitionSpellingAndExtent","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnostic-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getDiagnostic","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticCategory-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticCategory","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticCategoryName-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticCategoryName","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticCategoryText-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticCategoryText","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticFixIt-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_getDiagnosticFixIt","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticInSet-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getDiagnosticInSet","text":"clang_getDiagnosticInSet(Diags, Index)\n\nRetrieve a diagnostic associated with the given CXDiagnosticSet. Returns the requested diagnostic. This diagnostic must be freed via a call to clang_disposeDiagnostic.\n\nArguments\n\nDiags: the CXDiagnosticSet to query\nIndex: the zero-based diagnostic number to retrieve\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticLocation-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticLocation","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticNumFixIts-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticNumFixIts","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticNumRanges-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticNumRanges","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticOption-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getDiagnosticOption","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticRange-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getDiagnosticRange","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticSetFromTU-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticSetFromTU","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticSeverity-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticSeverity","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getDiagnosticSpelling-Tuple{Any}","page":"Home","title":"LibClang.clang_getDiagnosticSpelling","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getElementType-Tuple{Any}","page":"Home","title":"LibClang.clang_getElementType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getEnumConstantDeclUnsignedValue-Tuple{Any}","page":"Home","title":"LibClang.clang_getEnumConstantDeclUnsignedValue","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getEnumConstantDeclValue-Tuple{Any}","page":"Home","title":"LibClang.clang_getEnumConstantDeclValue","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getEnumDeclIntegerType-Tuple{Any}","page":"Home","title":"LibClang.clang_getEnumDeclIntegerType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getExceptionSpecificationType-Tuple{Any}","page":"Home","title":"LibClang.clang_getExceptionSpecificationType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getExpansionLocation-NTuple{5,Any}","page":"Home","title":"LibClang.clang_getExpansionLocation","text":"clang_getExpansionLocation(location, file, line, column, offset)\n\nRetrieve the file, line, column, and offset represented by the given source location. If the location refers into a macro expansion, retrieves the location of the macro expansion.\n\nArguments\n\nlocation: the location within a source file that will be decomposed into its parts\nfile: if non-NULL, will be set to the file to which the given source location points\nline: if non-NULL, will be set to the line to which the given source location points.\ncolumn: if non-NULL, will be set to the column to which the given source location points.\noffset: if non-NULL, will be set to the offset into the buffer to which the given source location points.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFieldDeclBitWidth-Tuple{Any}","page":"Home","title":"LibClang.clang_getFieldDeclBitWidth","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFile-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getFile","text":"clang_getFile(tu, file_name)\n\nRetrieve a file handle within the given translation unit. Returns the file handle for the named file in the translation unit tu, or a NULL file handle if the file was not a part of this translation unit.\n\nArguments\n\ntu: the translation unit\nfile_name: the name of the file\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFileContents-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_getFileContents","text":"clang_getFileContents(tu, file, size)\n\nRetrieve the buffer associated with the given file. Returns a pointer to the buffer in memory that holds the contents of file, or a NULL pointer when the file is not loaded.\n\nArguments\n\ntu: the translation unit\nfile: the file for which to retrieve the buffer\nsize: if non-NULL, will be set to the size of the buffer.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFileLocation-NTuple{5,Any}","page":"Home","title":"LibClang.clang_getFileLocation","text":"clang_getFileLocation(location, file, line, column, offset)\n\nRetrieve the file, line, column, and offset represented by the given source location.\n\nIf the location refers into a macro expansion, return where the macro was expanded or where the macro argument was written, if the location points at a macro argument.\n\nArguments\n\nlocation: the location within a source file that will be decomposed into its parts\nfile: if non-NULL, will be set to the file to which the given source location points\nline: if non-NULL, will be set to the line to which the given source location points\ncolumn: if non-NULL, will be set to the column to which the given source location points\noffset: if non-NULL, will be set to the offset into the buffer to which the given source location points\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFileName-Tuple{Any}","page":"Home","title":"LibClang.clang_getFileName","text":"clang_getFileName(SFile)\n\nRetrieve the complete file and path name of the given file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFileTime-Tuple{Any}","page":"Home","title":"LibClang.clang_getFileTime","text":"clang_getFileTime(SFile)\n\nRetrieve the last modification time of the given file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFileUniqueID-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getFileUniqueID","text":"clang_getFileUniqueID(file, outID)\n\nRetrieve the unique ID for the given file. Returns If there was a failure getting the unique ID, returns non-zero, otherwise returns 0.\n\nArguments\n\nfile: the file to get the ID for\noutID: stores the returned CXFileUniqueID\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getFunctionTypeCallingConv-Tuple{Any}","page":"Home","title":"LibClang.clang_getFunctionTypeCallingConv","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getIBOutletCollectionType-Tuple{Any}","page":"Home","title":"LibClang.clang_getIBOutletCollectionType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getIncludedFile-Tuple{Any}","page":"Home","title":"LibClang.clang_getIncludedFile","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getInclusions-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_getInclusions","text":"clang_getInclusions(tu, visitor, client_data)\n\nVisit the set of preprocessor inclusions in a translation unit. The visitor function is called with the provided data for every included file. This does not include headers included by the PCH file (unless one is inspecting the inclusions in the PCH file itself).\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getInstantiationLocation-NTuple{5,Any}","page":"Home","title":"LibClang.clang_getInstantiationLocation","text":"clang_getInstantiationLocation(location, file, line, column, offset)\n\nLegacy API to retrieve the file, line, column, and offset represented by the given source location.\n\nThis interface has been replaced by the newer interface clang_getExpansionLocation. See that interface's documentation for details.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getLocation-NTuple{4,Any}","page":"Home","title":"LibClang.clang_getLocation","text":"clang_getLocation(tu, file, line, column)\n\nRetrieves the source location associated with a given file/line/column in a particular translation unit.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getLocationForOffset-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_getLocationForOffset","text":"clang_getLocationForOffset(tu, file, offset)\n\nRetrieves the source location associated with a given character offset in a particular translation unit.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getModuleForFile-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getModuleForFile","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNullCursor-Tuple{}","page":"Home","title":"LibClang.clang_getNullCursor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNullLocation-Tuple{}","page":"Home","title":"LibClang.clang_getNullLocation","text":"clang_getNullLocation()\n\nRetrieve a NULL (invalid) source location.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNullRange-Tuple{}","page":"Home","title":"LibClang.clang_getNullRange","text":"clang_getNullRange()\n\nRetrieve a NULL (invalid) source range.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNumArgTypes-Tuple{Any}","page":"Home","title":"LibClang.clang_getNumArgTypes","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNumCompletionChunks-Tuple{Any}","page":"Home","title":"LibClang.clang_getNumCompletionChunks","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNumDiagnostics-Tuple{Any}","page":"Home","title":"LibClang.clang_getNumDiagnostics","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNumDiagnosticsInSet-Tuple{Any}","page":"Home","title":"LibClang.clang_getNumDiagnosticsInSet","text":"clang_getNumDiagnosticsInSet(Diags)\n\nDetermine the number of diagnostics in a CXDiagnosticSet.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNumElements-Tuple{Any}","page":"Home","title":"LibClang.clang_getNumElements","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getNumOverloadedDecls-Tuple{Any}","page":"Home","title":"LibClang.clang_getNumOverloadedDecls","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getOverloadedDecl-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getOverloadedDecl","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getOverriddenCursors-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_getOverriddenCursors","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getPointeeType-Tuple{Any}","page":"Home","title":"LibClang.clang_getPointeeType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getPresumedLocation-NTuple{4,Any}","page":"Home","title":"LibClang.clang_getPresumedLocation","text":"clang_getPresumedLocation(location, filename, line, column)\n\nRetrieve the file, line and column represented by the given source location, as specified in a # line directive.\n\nExample: given the following source code in a file somefile.c\n\n#123 \"dummy.c\" 1\n\nstatic int func(void)\n{\n    return 0;\n}\n\nthe location information returned by this function would be\n\nFile: dummy.c Line: 124 Column: 12\n\nwhereas clang_getExpansionLocation would have returned\n\nFile: somefile.c Line: 3 Column: 12\n\nArguments\n\nlocation: the location within a source file that will be decomposed into its parts\nfilename: if non-NULL, will be set to the filename of the source location. Note that filenames returned will be for \"virtual\" files, which don't necessarily exist on the machine running clang - e.g. when parsing preprocessed output obtained from a different environment. If a non-NULL value is passed in, remember to dispose of the returned value using clang_disposeString once you've finished with it. For an invalid source location, an empty string is returned\nline: if non-NULL, will be set to the line number of the source location. For an invalid source location, zero is returned\ncolumn: if non-NULL, will be set to the column number of the source location. For an invalid source location, zero is returned\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getRange-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getRange","text":"clang_getRange(_begin, _end)\n\nRetrieve a source range given the beginning and ending source locations.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getRangeEnd-Tuple{Any}","page":"Home","title":"LibClang.clang_getRangeEnd","text":"clang_getRangeEnd(range)\n\nRetrieve a source location representing the last character within a source range.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getRangeStart-Tuple{Any}","page":"Home","title":"LibClang.clang_getRangeStart","text":"clang_getRangeStart(range)\n\nRetrieve a source location representing the first character within a source range.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getRemappings-Tuple{Any}","page":"Home","title":"LibClang.clang_getRemappings","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getRemappingsFromFileList-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getRemappingsFromFileList","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getResultType-Tuple{Any}","page":"Home","title":"LibClang.clang_getResultType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getSkippedRanges-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getSkippedRanges","text":"clang_getSkippedRanges(tu, file)\n\nRetrieve all ranges that were skipped by the preprocessor.\n\nThe preprocessor will skip lines when they are surrounded by an if/ifdef/ifndef directive whose condition does not evaluate to true.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getSpecializedCursorTemplate-Tuple{Any}","page":"Home","title":"LibClang.clang_getSpecializedCursorTemplate","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getSpellingLocation-NTuple{5,Any}","page":"Home","title":"LibClang.clang_getSpellingLocation","text":"clang_getSpellingLocation(location, file, line, column, offset)\n\nRetrieve the file, line, column, and offset represented by the given source location.\n\nIf the location refers into a macro instantiation, return where the location was originally spelled in the source file.\n\nArguments\n\nlocation: the location within a source file that will be decomposed into its parts\nfile: if non-NULL, will be set to the file to which the given source location points\nline: if non-NULL, will be set to the line to which the given source location points\ncolumn: if non-NULL, will be set to the column to which the given source location points\noffset: if non-NULL, will be set to the offset into the buffer to which the given source location points\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTUResourceUsageName-Tuple{Any}","page":"Home","title":"LibClang.clang_getTUResourceUsageName","text":"clang_getTUResourceUsageName(kind)\n\nReturns the human-readable null-terminated C string that represents the name of the memory category.  This string should never be freed.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTemplateCursorKind-Tuple{Any}","page":"Home","title":"LibClang.clang_getTemplateCursorKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getToken-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getToken","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTokenExtent-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getTokenExtent","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTokenKind-Tuple{Any}","page":"Home","title":"LibClang.clang_getTokenKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTokenLocation-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getTokenLocation","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTokenSpelling-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_getTokenSpelling","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTranslationUnitCursor-Tuple{Any}","page":"Home","title":"LibClang.clang_getTranslationUnitCursor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTranslationUnitSpelling-Tuple{Any}","page":"Home","title":"LibClang.clang_getTranslationUnitSpelling","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTranslationUnitTargetInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_getTranslationUnitTargetInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTypeDeclaration-Tuple{Any}","page":"Home","title":"LibClang.clang_getTypeDeclaration","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTypeKindSpelling-Tuple{Any}","page":"Home","title":"LibClang.clang_getTypeKindSpelling","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTypeSpelling-Tuple{Any}","page":"Home","title":"LibClang.clang_getTypeSpelling","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTypedefDeclUnderlyingType-Tuple{Any}","page":"Home","title":"LibClang.clang_getTypedefDeclUnderlyingType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_getTypedefName-Tuple{Any}","page":"Home","title":"LibClang.clang_getTypedefName","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_hashCursor-Tuple{Any}","page":"Home","title":"LibClang.clang_hashCursor","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_indexLoc_getCXSourceLocation-Tuple{Any}","page":"Home","title":"LibClang.clang_indexLoc_getCXSourceLocation","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_indexLoc_getFileLocation-NTuple{6,Any}","page":"Home","title":"LibClang.clang_indexLoc_getFileLocation","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_indexSourceFile-NTuple{12,Any}","page":"Home","title":"LibClang.clang_indexSourceFile","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_indexSourceFileFullArgv-NTuple{12,Any}","page":"Home","title":"LibClang.clang_indexSourceFileFullArgv","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_indexTranslationUnit-NTuple{6,Any}","page":"Home","title":"LibClang.clang_indexTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getCXXClassDeclInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getCXXClassDeclInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getClientContainer-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getClientContainer","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getClientEntity-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getClientEntity","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getIBOutletCollectionAttrInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getIBOutletCollectionAttrInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getObjCCategoryDeclInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getObjCCategoryDeclInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getObjCContainerDeclInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getObjCContainerDeclInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getObjCInterfaceDeclInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getObjCInterfaceDeclInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getObjCPropertyDeclInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getObjCPropertyDeclInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_getObjCProtocolRefListInfo-Tuple{Any}","page":"Home","title":"LibClang.clang_index_getObjCProtocolRefListInfo","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_isEntityObjCContainerKind-Tuple{Any}","page":"Home","title":"LibClang.clang_index_isEntityObjCContainerKind","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_setClientContainer-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_index_setClientContainer","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_index_setClientEntity-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_index_setClientEntity","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isAttribute-Tuple{Any}","page":"Home","title":"LibClang.clang_isAttribute","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isConstQualifiedType-Tuple{Any}","page":"Home","title":"LibClang.clang_isConstQualifiedType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isCursorDefinition-Tuple{Any}","page":"Home","title":"LibClang.clang_isCursorDefinition","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isDeclaration-Tuple{Any}","page":"Home","title":"LibClang.clang_isDeclaration","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isExpression-Tuple{Any}","page":"Home","title":"LibClang.clang_isExpression","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isFileMultipleIncludeGuarded-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_isFileMultipleIncludeGuarded","text":"clang_isFileMultipleIncludeGuarded(tu, file)\n\nDetermine whether the given header is guarded against multiple inclusions, either with the conventional #ifndef #define #endif macro guards or with #pragma once.\n\n\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isFunctionTypeVariadic-Tuple{Any}","page":"Home","title":"LibClang.clang_isFunctionTypeVariadic","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isInvalid-Tuple{Any}","page":"Home","title":"LibClang.clang_isInvalid","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isInvalidDeclaration-Tuple{Any}","page":"Home","title":"LibClang.clang_isInvalidDeclaration","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isPODType-Tuple{Any}","page":"Home","title":"LibClang.clang_isPODType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isPreprocessing-Tuple{Any}","page":"Home","title":"LibClang.clang_isPreprocessing","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isReference-Tuple{Any}","page":"Home","title":"LibClang.clang_isReference","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isRestrictQualifiedType-Tuple{Any}","page":"Home","title":"LibClang.clang_isRestrictQualifiedType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isStatement-Tuple{Any}","page":"Home","title":"LibClang.clang_isStatement","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isTranslationUnit-Tuple{Any}","page":"Home","title":"LibClang.clang_isTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isUnexposed-Tuple{Any}","page":"Home","title":"LibClang.clang_isUnexposed","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isVirtualBase-Tuple{Any}","page":"Home","title":"LibClang.clang_isVirtualBase","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_isVolatileQualifiedType-Tuple{Any}","page":"Home","title":"LibClang.clang_isVolatileQualifiedType","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_loadDiagnostics-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_loadDiagnostics","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_parseTranslationUnit-NTuple{7,Any}","page":"Home","title":"LibClang.clang_parseTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_parseTranslationUnit2-NTuple{8,Any}","page":"Home","title":"LibClang.clang_parseTranslationUnit2","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_parseTranslationUnit2FullArgv-NTuple{8,Any}","page":"Home","title":"LibClang.clang_parseTranslationUnit2FullArgv","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_remap_dispose-Tuple{Any}","page":"Home","title":"LibClang.clang_remap_dispose","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_remap_getFilenames-NTuple{4,Any}","page":"Home","title":"LibClang.clang_remap_getFilenames","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_remap_getNumFiles-Tuple{Any}","page":"Home","title":"LibClang.clang_remap_getNumFiles","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_reparseTranslationUnit-NTuple{4,Any}","page":"Home","title":"LibClang.clang_reparseTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_saveTranslationUnit-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_saveTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_sortCodeCompletionResults-Tuple{Any,Any}","page":"Home","title":"LibClang.clang_sortCodeCompletionResults","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_suspendTranslationUnit-Tuple{Any}","page":"Home","title":"LibClang.clang_suspendTranslationUnit","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_toggleCrashRecovery-Tuple{Any}","page":"Home","title":"LibClang.clang_toggleCrashRecovery","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_tokenize-NTuple{4,Any}","page":"Home","title":"LibClang.clang_tokenize","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.clang_visitChildren-Tuple{Any,Any,Any}","page":"Home","title":"LibClang.clang_visitChildren","text":"\n\n\n\n","category":"method"},{"location":"index.html#LibClang.CINDEX_VERSION_MAJOR","page":"Home","title":"LibClang.CINDEX_VERSION_MAJOR","text":"The version constants for the libclang API. CINDEX_VERSION_MINOR should increase when there are API additions. CINDEX_VERSION_MAJOR is intended for \"major\" source/ABI breaking changes.\n\nThe policy about the libclang API was always to keep it source and ABI compatible, thus CINDEX_VERSION_MAJOR is expected to remain stable.\n\n\n\n\n\n","category":"constant"},{"location":"index.html#LibClang.CINDEX_VERSION_MINOR","page":"Home","title":"LibClang.CINDEX_VERSION_MINOR","text":"The version constants for the libclang API. CINDEX_VERSION_MINOR should increase when there are API additions. CINDEX_VERSION_MAJOR is intended for \"major\" source/ABI breaking changes.\n\nThe policy about the libclang API was always to keep it source and ABI compatible, thus CINDEX_VERSION_MAJOR is expected to remain stable.\n\n\n\n\n\n","category":"constant"},{"location":"index.html#LibClang.IndexerCallbacks","page":"Home","title":"LibClang.IndexerCallbacks","text":"A group of callbacks used by clang_indexSourceFile and clang_indexTranslationUnit.\n\n\n\n\n\n","category":"type"}]
}
